{-# LANGUAGE DeriveGeneric, DeriveAnyClass     #-}
{-# LANGUAGE OverloadedStrings #-}

module DataTypes.OptionalFieldsDeriving
  ( demo
  )
where

import           GHC.Generics
import           Data.Aeson
import Data.Maybe

data MapData = MapData
  { name :: Maybe String
  , code :: Maybe String
  } deriving (Show, Generic, ToJSON, FromJSON)

-- When a field has type Maybe ..., the autogenerated instance would
-- use .:? for that field â€“ that is, autogenerated instances replace
-- missing fields with Nothing. (Telling just in case, since it doesn't
-- seem to be documented in Aeson's docs.)

-- example:
-- MapData {name = Nothing, code = Nothing}

demo :: IO ()
demo = do
  print "/// optional fields using generic-deriving"
  let s = decode "{}" :: Maybe MapData
  print . fromJust $ s
  